var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(script) {
    const fetchOpts = {};
    if (script.integrity)
      fetchOpts.integrity = script.integrity;
    if (script.referrerpolicy)
      fetchOpts.referrerPolicy = script.referrerpolicy;
    if (script.crossorigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (script.crossorigin === "anonymous")
      fetchOpts.credentials = "omit";
    else
      fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
})();
const style = "";
class ContDownTimer {
  /**
  * 
  * @param {Object} options - Options to initialise class
  * @param {callback} cb - Function called after the end of the contdown
  */
  constructor(options, cb) {
    __publicField(this, "options", {
      language: "en"
    });
    /**
     * 
     * @param {Date.year} year 
     * @param {Date.month} month 
     * @returns integer - nomber of day of the month
     */
    __publicField(this, "getDays", (year, month) => {
      return new Date(year, month, 0).getDate();
    });
    this.options = Object.assign({}, options, this.options);
    this.cb = cb;
    this.intervalId = setInterval(this.setDate.bind(this), 1e3);
    this.contdownCallback(this.cb);
  }
  setDate() {
    const days = document.querySelector("#days");
    const hours = document.querySelector("#hours");
    const minutes = document.querySelector("#minutes");
    const seconds = document.querySelector("#seconds");
    this.now = new Date();
    let s = (this.options.launchDate.getTime() - this.now.getTime()) / 1e3 - this.subtractDays();
    const d = Math.floor(s / 86400);
    days.innerHTML = `<strong>${d}</strong><span>${this.translate("day")}${d > 1 ? "s" : ""}</span>`;
    s -= d * 86400;
    const h = Math.floor(s / 3600);
    hours.innerHTML = `<strong>${h}</strong><span>${this.translate("hour")}${h > 1 ? "s" : ""}</span>`;
    s -= h * 3600;
    const m = Math.floor(s / 60);
    minutes.innerHTML = `<strong>${m}</strong><span>${this.translate("min")}${m > 1 ? "s" : ""}</span>`;
    s -= m * 60;
    s = Math.floor(s);
    seconds.innerHTML = `<strong>${s}</strong><span>${this.translate("sec")}${s > 1 ? "s" : ""}</span>`;
    if (this.addMonths(new Date(), 1) >= this.options.launchDate) {
      return this.contdownCallback(this.cb);
    }
  }
  /**
   * 
   * @param {callback} callback - callback function 
   * @returns callback
   */
  contdownCallback(callback) {
    if (this.addMonths(new Date(), 1) >= this.options.launchDate) {
      clearInterval(this.intervalId);
      return callback();
    }
  }
  /**
   * 
   * @returns Number of seconds for a current month
   */
  subtractDays() {
    return this.getDays(this.now.getFullYear(), this.now.getMonth() + 1) * 86400;
  }
  /**
   * 
   * @param {Date} date - current date (now)
   * @param {number} months - add month to current date
   * @returns new formated date
   */
  addMonths(date, months) {
    date.setMonth(date.getMonth() + months);
    return date;
  }
  /**
   * 
   * @param {string} language 
   * @returns Translate
   */
  translate(translate) {
    const language = {
      fr: {
        day: "Jour",
        hour: "Heure",
        min: "Minutes",
        sec: "Seconde"
      },
      en: {
        day: "Day",
        hour: "Hour",
        min: "Minute",
        sec: "Second"
      }
    };
    return language[this.options.language][translate];
  }
}
new ContDownTimer({
  launchDate: new Date(2023, 3, 22, 0, 0),
  language: "fr"
}, () => {
  document.querySelector(".contdown-container").style.display = "none";
  document.body.innerHTML = `<h1>The timer is ended !</h1>`;
});
